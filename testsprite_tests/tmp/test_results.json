[
  {
    "projectId": "7d3412d8-c1af-400c-b683-13c7fff977ae",
    "testId": "2ebd877c-788d-4181-af64-591de99f4145",
    "userId": "c4583458-a0c1-70fc-33fa-e12f0ea8c209",
    "title": "TC001-verify_health_check_api_response",
    "description": "Test the /health GET endpoint to ensure it returns system health status including ok boolean, total voices count, Nigerian voices count, and a hash string. Validate the response status is 200 and the JSON structure matches the specification.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nAPI_KEY = \"test-api-key\"  # Replace with valid API key if required\nTIMEOUT = 30\n\ndef verify_health_check_api_response():\n    url = f\"{BASE_URL}/health\"\n    headers = {\n        \"X-API-Key\": API_KEY\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {str(e)}\"\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    try:\n        json_data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Validate JSON structure and types\n    assert isinstance(json_data, dict), \"Response JSON is not an object\"\n    assert \"ok\" in json_data and isinstance(json_data[\"ok\"], bool), \"'ok' field missing or not boolean\"\n    assert \"voices\" in json_data and isinstance(json_data[\"voices\"], int), \"'voices' field missing or not integer\"\n    assert \"ng_voices\" in json_data and isinstance(json_data[\"ng_voices\"], int), \"'ng_voices' field missing or not integer\"\n    assert \"hash\" in json_data and isinstance(json_data[\"hash\"], str), \"'hash' field missing or not string\"\n\nverify_health_check_api_response()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-01T12:47:53.621Z",
    "modified": "2025-09-01T12:48:05.447Z"
  },
  {
    "projectId": "7d3412d8-c1af-400c-b683-13c7fff977ae",
    "testId": "24a66129-17e6-46c3-b065-63167c8af908",
    "userId": "c4583458-a0c1-70fc-33fa-e12f0ea8c209",
    "title": "TC002-validate_voice_list_api_returns_nigerian_voices",
    "description": "Test the /voices GET endpoint to verify it returns a list of available TTS voices filtered to Nigerian voices by default. Confirm the response status is 200 and the voices array contains at least one voice with ShortName and Locale properties.",
    "code": "import requests\n\nAPI_KEY = \"your_api_key_here\"\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\ndef test_validate_voice_list_api_returns_nigerian_voices():\n    url = f\"{BASE_URL}/voices\"\n    headers = {\n        \"X-API-Key\": API_KEY\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to /voices failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(data, dict), \"Response JSON should be an object\"\n    assert data.get(\"ok\") is True, \"'ok' field should be True\"\n    voices = data.get(\"voices\")\n    assert isinstance(voices, list), \"'voices' should be a list\"\n    assert len(voices) > 0, \"Voices list should contain at least one voice\"\n\n    # At least one voice should have ShortName and Locale properties\n    voice_with_props = False\n    for voice in voices:\n        if isinstance(voice, dict) and \"ShortName\" in voice and \"Locale\" in voice:\n            if isinstance(voice[\"ShortName\"], str) and isinstance(voice[\"Locale\"], str):\n                voice_with_props = True\n                break\n\n    assert voice_with_props, \"No voice in the list has both 'ShortName' and 'Locale' string properties\"\n\ntest_validate_voice_list_api_returns_nigerian_voices()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-01T12:47:53.627Z",
    "modified": "2025-09-01T12:48:14.402Z"
  },
  {
    "projectId": "7d3412d8-c1af-400c-b683-13c7fff977ae",
    "testId": "eb3cf80a-14ed-4751-b8d1-0c783aa66052",
    "userId": "c4583458-a0c1-70fc-33fa-e12f0ea8c209",
    "title": "TC003-test_text_to_speech_api_with_valid_input",
    "description": "Test the /api/speak POST endpoint with valid text input (20-120 words) and optional parameters like voice, format, rate, volume, and pitch. Verify the response status is 200 and the returned audio file is in the requested format and larger than 100KB.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nAPI_KEY = \"your_api_key_here\"  # Replace with a valid API key for authentication\nTIMEOUT = 30\n\n\ndef test_text_to_speech_api_with_valid_input():\n    # Prepare headers with authentication\n    headers = {\n        \"X-API-Key\": API_KEY,\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Sample text between 20 and 120 words (approx. 85 words)\n    text = (\n        \"This is a sample text used to test the text to speech API endpoint. \"\n        \"The text contains enough words to validate the API's ability to process a valid input \"\n        \"and generate an audio file accordingly. Testing with different parameters such as voice, \"\n        \"format, rate, volume, and pitch ensures we cover functional capabilities and verify correct \"\n        \"handling of optional inputs by the service.\"\n    )\n\n    # Optional parameters for TTS\n    payload = {\n        \"text\": text,\n        \"voice\": \"en-NG-EzinneNeural\",\n        \"format\": \"mp3_48k\",\n        \"rate\": \"+10%\",\n        \"volume\": \"+5%\",\n        \"pitch\": \"+2Hz\"\n    }\n\n    url = f\"{BASE_URL}/api/speak\"\n\n    try:\n        response = requests.post(url, headers=headers, json=payload, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to /api/speak failed with exception: {e}\"\n\n    # Assert response status code 200\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n\n    # Assert Content-Type header indicates audio format (mp3)\n    content_type = response.headers.get(\"Content-Type\", \"\")\n    assert content_type in [\"audio/mpeg\", \"audio/mp3\"], f\"Unexpected Content-Type: {content_type}\"\n\n    # Assert response content length is greater than 100KB\n    content_length = len(response.content)\n    assert content_length > 100 * 1024, f\"Audio file size is less than 100KB: {content_length} bytes\"\n\n\ntest_text_to_speech_api_with_valid_input()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 42, in test_text_to_speech_api_with_valid_input\nAssertionError: Expected status code 200 but got 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-01T12:47:53.632Z",
    "modified": "2025-09-01T12:48:14.421Z"
  },
  {
    "projectId": "7d3412d8-c1af-400c-b683-13c7fff977ae",
    "testId": "a097013a-228a-4223-95d6-0b5fa2cb88fe",
    "userId": "c4583458-a0c1-70fc-33fa-e12f0ea8c209",
    "title": "TC004-check_text_to_speech_api_authentication_enforcement",
    "description": "Test the /api/speak POST endpoint without providing the X-API-Key header when authentication is enabled. Verify the API returns a 401 Unauthorized status and appropriate error message.",
    "code": "import requests\n\ndef test_check_text_to_speech_api_authentication_enforcement():\n    base_url = \"http://localhost:5000\"\n    url = f\"{base_url}/api/speak\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n        # Intentionally no 'X-API-Key' header to test authentication enforcement\n    }\n    payload = {\n        \"text\": \"This is a test to verify authentication enforcement on the text to speech API.\"\n    }\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=30)\n    except requests.RequestException as e:\n        raise AssertionError(f\"Request failed: {e}\")\n\n    assert response.status_code == 401, f\"Expected status code 401, got {response.status_code}\"\n    # The error message might be in response body or empty\n    content_type = response.headers.get(\"Content-Type\", \"\")\n    if \"application/json\" in content_type:\n        try:\n            resp_json = response.json()\n            assert \"error\" in resp_json or \"message\" in resp_json, \"Expected error or message in JSON response\"\n        except ValueError:\n            # Response was not JSON-formatted despite header, pass as long as status 401 is received\n            pass\n\ntest_check_text_to_speech_api_authentication_enforcement()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-01T12:47:53.639Z",
    "modified": "2025-09-01T12:48:08.093Z"
  },
  {
    "projectId": "7d3412d8-c1af-400c-b683-13c7fff977ae",
    "testId": "0bcb5c75-96dc-4c41-a2cf-27f48c3233bc",
    "userId": "c4583458-a0c1-70fc-33fa-e12f0ea8c209",
    "title": "TC005-validate_text_to_speech_api_rate_limiting",
    "description": "Test the /api/speak POST endpoint by sending requests exceeding the configured rate limit from the same IP. Verify the API returns a 429 status code indicating rate limiting is enforced.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nAPI_KEY = \"test-api-key\"  # Replace with a valid API key\n\ndef validate_text_to_speech_api_rate_limiting():\n    url = f\"{BASE_URL}/api/speak\"\n    headers = {\n        \"X-API-Key\": API_KEY,\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"text\": \"Hello, this is a test to check the rate limiting of the ODIADEV Edge-TTS API. \" \n                \"We are sending multiple requests rapidly to trigger the rate limiting mechanism.\"\n    }\n\n    # We will send 20 requests rapidly to exceed typical rate limits\n    rate_limit_exceeded = False\n    for i in range(20):\n        try:\n            response = requests.post(url, json=payload, headers=headers, timeout=30)\n        except requests.RequestException as e:\n            raise AssertionError(f\"Request failed at iteration {i+1}: {e}\")\n\n        if response.status_code == 429:\n            rate_limit_exceeded = True\n            break\n        elif response.status_code == 401:\n            raise AssertionError(\"Authentication failed with provided API key.\")\n        elif response.status_code != 200:\n            raise AssertionError(f\"Unexpected status code {response.status_code} at iteration {i+1}.\")\n\n    assert rate_limit_exceeded, \"Rate limiting was not enforced; did not receive 429 status code.\"\n\nvalidate_text_to_speech_api_rate_limiting()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 35, in <module>\n  File \"<string>\", line 29, in validate_text_to_speech_api_rate_limiting\nAssertionError: Authentication failed with provided API key.\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-01T12:47:53.644Z",
    "modified": "2025-09-01T12:48:15.898Z"
  },
  {
    "projectId": "7d3412d8-c1af-400c-b683-13c7fff977ae",
    "testId": "380f3dfe-bfdc-4b25-8e35-f9ee59dbe070",
    "userId": "c4583458-a0c1-70fc-33fa-e12f0ea8c209",
    "title": "TC006-verify_web_documentation_interface_loads_successfully",
    "description": "Test the /docs GET endpoint to ensure the web-based documentation and interactive TTS testing interface loads successfully with status 200 and returns valid HTML content.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\ndef verify_web_documentation_interface_loads_successfully():\n    url = f\"{BASE_URL}/docs\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status 200, got {response.status_code}\"\n        content_type = response.headers.get(\"Content-Type\", \"\")\n        assert \"text/html\" in content_type, f\"Expected 'text/html' in Content-Type, got {content_type}\"\n        html_content = response.text\n        assert \"<html\" in html_content.lower() and \"</html>\" in html_content.lower(), \"Response does not contain valid HTML content\"\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\nverify_web_documentation_interface_loads_successfully()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-01T12:47:53.650Z",
    "modified": "2025-09-01T12:48:09.438Z"
  },
  {
    "projectId": "7d3412d8-c1af-400c-b683-13c7fff977ae",
    "testId": "9c27fdbc-69bc-4499-930d-e3b6afd50e59",
    "userId": "c4583458-a0c1-70fc-33fa-e12f0ea8c209",
    "title": "TC007-validate_root_api_information_response",
    "description": "Test the / GET endpoint to verify it returns basic API information including ok boolean, message string, docs URL, and health URL. Confirm the response status is 200 and JSON structure matches the specification.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\ndef validate_root_api_information_response():\n    try:\n        response = requests.get(f\"{BASE_URL}/\", timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        data = response.json()\n        assert isinstance(data, dict), \"Response is not a JSON object\"\n        # Check required keys and their types\n        assert \"ok\" in data and isinstance(data[\"ok\"], bool), \"'ok' key missing or not a boolean\"\n        assert \"message\" in data and isinstance(data[\"message\"], str), \"'message' key missing or not a string\"\n        assert \"docs\" in data and isinstance(data[\"docs\"], str), \"'docs' key missing or not a string\"\n        assert \"health\" in data and isinstance(data[\"health\"], str), \"'health' key missing or not a string\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request to root API failed: {e}\"\n\nvalidate_root_api_information_response()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-01T12:47:53.656Z",
    "modified": "2025-09-01T12:48:15.640Z"
  }
]
